<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<title>rtmpForHtml</title>
	<link rel="stylesheet" type="text/css" href="history/history.css" />
	<script type="text/javascript" src="history/history.js"></script>
	<script type="text/javascript" src="swfobject.js"></script>
	<script type="text/javascript" src="vvMedia.js"></script>
</head>

<body>
<div align="left" style="width: 1024px; height: 700px">
	<table align="center" style="width: 100%">
		<tr>
			<td style="height: 260px; width: 320px">
			<form action="" method="post">
				<textarea rows="1" cols="20" name="mediaInfo" style="width: 320px; height: 260px; font-family: 宋体; font-size: 12px;" id="mediaInfo" readonly="readonly"></textarea>
			</form>
			</td>
			<td style="height: 260px; width: 320px;">
			<form action="" method="post" style="width: 320px; height: 260px; font-family: 宋体; font-size: 12px;">
				<label id="Label1">服务器版本：</label><input name="serverVersion" id="serverVersion" style="width: 150px" type="text" /><br />
				<label id="Label2">客户端版本：</label><input name="clientVersion" id="clientVersion" style="width: 150px" type="text" /><br />
				<label id="Label3">当前服务器：</label><input name="currentServer" id="currentServer" style="width: 150px" type="text" /><br />
				<label id="Label4">flash 版本：</label><input name="flashVersion" id="flashVersion" style="width: 150px" type="text" /><br />
				<label id="Label5">最低支持插件版本：</label><input name="lowestSupportHQVersion" id="lowestSupportHQVersion" style="width: 150px" type="text" /><br />
				<label id="Label6">实际使用插件版本：</label><input name="HQVersion" id="HQVersion" style="width: 150px" type="text" /><br />
				<label id="Label16">session:</label><input name="session" style="width: 75px" type="text" id="session" value="TestSession" />
				<label id="Label17">ID:</label><input name="userID" style="width: 48px" type="text" id="userID" value="Test" />
				<input name="isHD" type="checkbox" id="isHD" /><label id="Label7">高清</label>
				<input name="isUDP" type="checkbox" id="isUDP" /><label id="Label8">UDP</label>
				<input name="rtmpAddr" style="width: 135px" type="text" id="rtmpAddr" value="testrtmp.vvku.com:1966" />
				<input name="rtmpLive" style="width: 46px" type="text" id="rtmpLive" value="live" />
				<input name="rtmpStream" style="width: 46px" type="text" id="rtmpStream" value="stream1" />
				<input name="rtmpArea" style="width: 46px" type="text" id="rtmpArea" value="hangzhou" /><br />
				<select name="changeServerList" style="width: 216px" id="changeServerList">
				</select>
				<input name="changeServerBtn" style="width: 90px" type="button" value="切换服务器" id="changeServerBtn" onclick="changeServer()" /><br />
				<input name="initBtn" style="width: 48px" type="button" value="初始化" id="initBtn" onclick="initConnect()" />
				<input name="closeBtn" style="width: 48px" type="button" value="断开" id="closeBtn" onclick="closeConnect()" />
				<input name="publishBtn" style="width: 48px" type="button" value="上麦" id="publishBtn" onclick="startPublish()" />
				<input name="playBtn" style="width: 48px" type="button" value="播放" id="playBtn" onclick="startPlay()" />
				<input name="pauseBtn" style="width: 48px" type="button" value="暂停" id="pauseBtn" onclick="pause()" />
				<input name="stopBtn" style="width: 48px" type="button" value="停止" id="stopBtn" onclick="stop()" />
			</form>
			</td>
			<td style="height: 260px; width: 320px;">
			<form action="" method="post" style="width: 320px; height: 260px; font-family: 宋体; font-size: 12px;">
				<p>
				  <label id="Label19">音频编码：</label>
				  <select name="audioCodecList" style="width: 150px" id="audioCodecList" onchange="setAudioCodec()">
			      </select>
				  <br />
				  <label id="Label9">视频编码：</label>
				  <select name="videoCodecList" style="width: 150px" id="videoCodecList" onchange="setVideoCodec()">
			      </select>
				  <br />
				  <label id="Label10">摄 像 头：</label>
				  <select name="camList" style="width: 150px" id="camList" onchange="setCam()">
			      </select>
				  <br />
				  <label id="Label11">麦 克 风：</label>
				  <select name="micList" style="width: 150px" id="micList" onchange="setMic()">
			      </select>
				  <br />
				  <input name="isUseCam" type="checkbox" checked="checked" id="isUseCam" onchange="setIsUseCam()" />
				  <label id="Label14">使用摄像头</label>
				  <input name="isUseMic" type="checkbox" checked="checked" id="isUseMic" onchange="setIsUseMic()" />
				  <label id="Label44">使用麦克风</label>
				  <br />
				  <input name="Button" type="button" value="麦克风"  onclick="setCapAudioFromMic()" />
				  <input name="Button2" type="button" value="混音"  onclick="setCapAudioFromStereo()" />
                  <br />
				  <input name="Button12" type="button" value="插件测试"  onclick="checkPlugin()" />
				  <input name="Button13" type="button" value="下载插件" onclick="downloadHD()" /><br />
				  <label id="Label12">满足下列条件将提示带宽不足：</label>
				  <br />
				  <label id="Label13">10s内平均ping大于：</label>
				  <input name="avgPing" style="width: 78px" type="text" value="200" id="avgPing" onchange="setAvgPing()" /><br />
				</p>
			</form>
			</td>
		</tr>
		<tr>
			<td style="height: 240px; width: 320px">
			<form action="" method="post" >
				<textarea rows="1" cols="20" name="streamInfo" style="width: 320px; height: 240px; font-family: 宋体; font-size: 12px;" id="streamInfo" readonly="readonly"></textarea>
			</form>
			</td>
			<td style="height: 240px; width: 320px;">
			<script type="text/javascript">
				try{
					var width = document.getElementById("width").value;
					var height = document.getElementById("height").value;
				}
				catch(e){
				}
				var player1;
				player1 = new Video( "player1",	//名称必须与 DIV id 一致，否则无法显示视频
									(width||320),
									(height||240),
									function(type, info){
									   switch(type)
									   {
										case RTMP_MEDIA_INFO:
											switch(info)
											{
											case "Svr.Version.Success":
												_serverVersion.value = player1.getServerVersion();
												break;
											case "NetConnection.Connect.Success":
											case "ChangeInfo.NetConnection.Connect.Success":
											case "new connect":
												_currentServer.value = player1.getCurrentServer();
												for (var i=_changeServerList.options.length-1; i>=0; i--){
													_changeServerList.options.remove(i);
												}
												var serverList = player1.getChangeSvrList();
												var serverListArray = serverList.split(',');
												for (index in serverListArray){
													var item = new Option(serverListArray[index], serverListArray[index]);
													_changeServerList.options.add(item);
												}
												break;
											default:
												break;
											}
											break;
										case RTMP_MEDIA_ERROR:
											break;
										case MEDIA_DEVICE_INFO:
											switch(info)
											{
											case "AVHardwareDisable":
												alert("flash player 全局设置了禁用硬件设置，修改方法：\nC:\WINDOWS\system32\Macromed\Flash\mms.cfg\n文件，修改为 AVHardwareDisable=0");;
												break;
											//需要添加其他摄像头麦克风禁用的消息
											default:
												break;
											}
											break;
										case RTMP_MEDIA_READY:	//swf加载完成消息
											player1.onSwfReady();
											onSwfReady();
											break;
										case RTMP_MEDIA_NETSTREAM_INFO:
											_streamInfo.value = info;
											break;
										default:
											break;
									   }
									   if (type != RTMP_MEDIA_NETSTREAM_INFO){
											var date = new Date();
											_mediaInfo.value = date.getHours()+":"+date.getMinutes()+":"+date.getSeconds()+"."+date.getMilliseconds()+' '+info+'\n'+_mediaInfo.value;
									   }
									},
									null);	
			</script> 
			<div id="player1">
				<p>
					To view this page ensure that Adobe Flash Player version 
					11.0.0 or greater is installed. 
				</p>
				<script type="text/javascript">
					var pageHost = ((document.location.protocol == "https:") ? "https://" : "http://"); 
					document.write("<a href='http://www.adobe.com/go/getflashplayer'><img src='" 
									+ pageHost + "www.adobe.com/images/shared/download_buttons/get_flash_player.gif' alt='Get Adobe Flash player' /></a>" ); 
				</script>
			</div>
			</td>
			<td style="height: 240px">
			<form action="" method="post" style="width: 320px; height: 260px; font-family: 宋体; font-size: 12px;">
				<label id="Label15">视频帧率：</label><input name="videoFPS" type="text"  style="width: 90px" value="10" id="videoFPS" onchange="setCameraMode()" /><br />
				<label id="Label120">视频码率：</label><input name="videoKBitrate" style="width: 90px" type="text" value="160" id="videoKBitrate" onchange="setCameraQuality()" />
			  (kbps)<br />
				<label id="Label121">视频宽：</label><input name="width" style="width: 56px" type="text" value="320" id="width" onchange="setCameraMode()" />
				<label id="Label122"><br />
        视频高：</label><input name="height" style="width: 56px" type="text" value="240" id="height" onchange="setCameraMode()" /><br />
				<label id="Label123">视频质量(0-100)：</label><input name="videoQuality" style="width: 39px" type="text" value="80" id="videoQuality" onchange="setCameraQuality()" /><br />
				<label id="Label124">关键帧间隔(1-48)：</label><input name="videoKeyFrameInterval" style="width: 38px" type="text" value="30" id="videoKeyFrameInterval" onchange="setKeyFrameInterval()" /><br />
				<label id="Label125">音频码率(kbps)：</label><input name="audioKBitrate" style="width: 91px" type="text" value="32" id="audioKBitrate" onchange="setAudioBitrate()" /><br />
				<label id="Label126">音频采样率(Hz)：</label><input name="audioSamplerate" style="width: 92px" type="text" value="16000" id="audioSamplerate" onchange="setAudioSamplerate()" /><br />
				<label id="Label127">音频通道数：</label><input name="audioChannelCount" style="width: 115px" type="text" value="2" id="audioChannelCount" onchange="setAudioChannelCount()" /><br />
				<label id="Label128">采样精度(bit)：</label><input name="audioBitPerSample" style="width: 95px" type="text" value="16" id="audioBitPerSample" onchange="setAudioBitPerSample()" />
			</form>
			</td>
		</tr>
	</table>
	<table style="width: 100%" align="center">
		<tr>
			<td style="width: 517px">
			<form action="" method="post" style="height: 158px; width: 510px; font-family: 宋体; font-size: 12px;">
				<label id="Label1116">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自动加速阈值：加速时间：加速度：缓冲区时间<br />
				</label><label id="Label1117">自定义：</label><input name="speedupRange" style="width: 60px" type="text" id="speedupRange" value="5" />
				<input name="speedupTime" style="width: 60px" type="text" id="speedupTime" value="4" />
				<input name="speedupSpeed" style="width: 60px" type="text" id="speedupSpeed" value="10" />
				<input name="bufferTime" style="width: 60px" type="text" id="bufferTime" value="2" />
				<input name="Button14" style="width: 125px" type="button" onclick="setPlayMode()" value="设置缓冲区时间" /><br />
				<input name="isReceiveVideo" type="checkbox" checked="checked" id="isReceiveVideo" onchange="setReceiveVideo()" /><label id="Label18">接收视频</label>
				<input name="isReceiveAudio" type="checkbox" checked="checked" id="isReceiveAudio" onchange="setReceiveAudio()" /><label id="Label129">接收音频</label>
				<label id="Label1119">BufferEmpty总次数：</label><input name="Text37" style="width: 52px" type="text" />
				<label id="Label20">BufferFull总次数：</label><input name="Text38" style="width: 51px" type="text" /><br />
				<label id="Label130">窗口宽：</label><input name="displayWidth" id="displayWidth" style="width: 39px" type="text" value="320" />
				<label id="Label131">高：</label><input name="displayHeight" id="displayHeight" style="width: 43px" type="text" value="240" />
				<input name="Button19" style="width: 107px" type="button" onchange="setVideoDisplaySize()" value="设置窗口大小" />
				<label id="Label21">音量：</label><input name="volume" style="width: 31px" type="text" id="volume" onchange="setVolume()" value="80" />
				<input name="isMute" type="checkbox" id="isMute" onchange="setMute()" /><label id="Label132">静音</label>
			</form>
			</td>
			<td>
			<form action="" method="post" style="height: 143px; font-family: 宋体; font-size: 12px;">
				<label id="Label22">调度时Ping超时：</label><input name="schedulingPing" style="width: 55px" type="text" id="schedulingPing" value="1500" />
				<label id="Label23">播放时超过Ping就切换服务器：</label><input name="limitCheckPing" style="width: 56px" type="text" id="limitCheckPing" value="300" /><br />
				<label id="Label24">检测Ping间隔：</label><input name="checkPingTimer" style="width: 73px" type="text" id="checkPingTimer" value="1000" />
				<input name="Checkbox8" type="checkbox" />
				<label id="Label25">自动检测Ping</label><br />
				<label id="Label26">检测Delay范围：</label><input name="Text45" style="width: 70px" type="text" />
				<label id="Label27">Delay范围内次数：</label><input name="Text46" style="width: 55px" type="text" /><input name="Text50" style="width: 56px" type="text" /><br />
				<label id="Label28">Delay最大值：</label><input name="Text47" style="width: 44px" type="text" />
				<label id="Label29">最小值：</label><input name="Text48" style="width: 46px" type="text" />
				<label id="Label30">平均值：</label><input name="Text49" style="width: 53px" type="text" />
			</form>
			</td>
		</tr>
	</table>
</div>

<script type="text/javascript">
	var _camIndexArray = [];
	var _micIndexArray = [];

	var _mediaInfo = document.getElementById("mediaInfo");
	var _streamInfo = document.getElementById("streamInfo");
	var _audioCodecList = document.getElementById("audioCodecList");
	var _videoCodecList = document.getElementById("videoCodecList");
	var _micList = document.getElementById("micList");
	var _camList = document.getElementById("camList");
	var _isUseCam = document.getElementById("isUseCam");
	var _isUseMic = document.getElementById("isUseMic");
	var _isHD = document.getElementById("isHD");
	var _isUDP = document.getElementById("isUDP");
	var _rtmpAddr = document.getElementById("rtmpAddr");
	var _rtmpLive = document.getElementById("rtmpLive");
	var _rtmpStream = document.getElementById("rtmpStream");
	var _rtmpArea = document.getElementById("rtmpArea");
	var _schedulingPing = document.getElementById("schedulingPing");
	var _limitCheckPing = document.getElementById("limitCheckPing");
	var _checkPingTimer = document.getElementById("checkPingTimer");
	var _userID = document.getElementById("userID");
	var _session = document.getElementById("session");
	var _width = document.getElementById("width");
	var _height = document.getElementById("height");
	var _audioKBitrate = document.getElementById("audioKBitrate");
	var _audioSamplerate = document.getElementById("audioSamplerate");
	var _videoFPS = document.getElementById("videoFPS");
	var _videoKeyFrameInterval = document.getElementById("videoKeyFrameInterval");
	var _videoKBitrate = document.getElementById("videoKBitrate");
	var _videoQuality = document.getElementById("videoQuality");
	var _volume = document.getElementById("volume");
	var _isMute = document.getElementById("isMute");
	var _bufferTime = document.getElementById("bufferTime");
	var _speedupRange = document.getElementById("speedupRange");
	var _speedupTime = document.getElementById("speedupTime");
	var _speedupSpeed = document.getElementById("speedupSpeed");
	var _avgPing = document.getElementById("avgPing");
	var _audioChannelCount = document.getElementById("audioChannelCount");
	var _audioBitPerSample = document.getElementById("audioBitPerSample");
	var _clientVersion = document.getElementById("clientVersion");
	var _flashVersion = document.getElementById("flashVersion");
	var _lowestSupportHQVersion = document.getElementById("lowestSupportHQVersion");
	var _HQVersion = document.getElementById("HQVersion");
	var _serverVersion = document.getElementById("serverVersion");
	var _currentServer = document.getElementById("currentServer");
	var _changeServerList = document.getElementById("changeServerList");
	var _displayWidth = document.getElementById("displayWidth");
	var _displayHeight = document.getElementById("displayHeight");
	var _isReceiveAudio = document.getElementById("isReceiveAudio");
	var _isReceiveVideo = document.getElementById("isReceiveVideo");
	
	function onSwfReady(){
		if (player1)
		{
			// audioCodecList
			for (var i=_audioCodecList.options.length-1; i>=0; i--){
				_audioCodecList.options.remove(i);
			}
			var audioCodecSet = player1.getAudioCodecSet();
			var audioCodecArray = audioCodecSet.split(',');
			for (audioCodec in audioCodecArray){
				var item = new Option(audioCodecArray[audioCodec], audioCodecArray[audioCodec]);
				_audioCodecList.options.add(item);
			}
			// videoCodecList
			for (var i=_videoCodecList.options.length-1; i>=0; i--){
				_videoCodecList.options.remove(i);
			}
			var videoCodecSet = player1.getVideoCodecSet();
			var videoCodecArray = videoCodecSet.split(',');
			for (videoCodec in videoCodecArray){
				var item = new Option(videoCodecArray[videoCodec], videoCodecArray[videoCodec]);
				_videoCodecList.options.add(item);
			}
			// micList
			for (var i=_micList.options.length-1; i>=0; i--){
				_micList.options.remove(i);
			}
			var micListArray = player1.getMicList();
			for (var index in micListArray){
				var item = new Option(micListArray[index], micListArray[index]);
				_micList.options.add(item);
				_micIndexArray.push(index);
			}
			// camList
			for (var i=_camList.options.length-1; i>=0; i--){
				_camList.options.remove(i);
			}
			var camListArray = player1.getCamList();
			for (var index in camListArray){
				var item = new Option(camListArray[index], camListArray[index]);
				_camList.options.add(item);
				_camIndexArray.push(index);
			}
			//vvMediaVersion | clientVersion
			_clientVersion.value = player1.getClientVersion();
			//HQVersion
			_lowestSupportHQVersion.value = player1.getLowestSupportHQVersion();
			_HQVersion.value = player1.getHQVersion();
		}
	}
	function initConnect(){
		if (player1)
			player1.initConnect( _rtmpAddr.value,
							_rtmpLive.value,
							_rtmpStream.value,
							_rtmpArea.value,
							_schedulingPing.value,
							_limitCheckPing.value,
							_checkPingTimer.value,
							_userID.value,
							_isHD.checked,
							_session.value,
							_isUDP.checked);
			_flashVersion.value = player1.getFlashVersion();
	}
	function closeConnect()
	{
		if (player1)
			player1.closeConnect();
	}
	function startPublish()
	{
		if (player1) {
			var micID = -1;
			for(var i=0; i<_micIndexArray.length; i++)
			{
				if(i == _micList.selectedIndex)
				{
					micID = _micIndexArray[i]
					break;
				}
			}
			var camID = -1;
			for(var i=0; i<_camIndexArray.length; i++)
			{
				if(i == _camList.selectedIndex)
				{
					camID = _camIndexArray[i]
					break;
				}
			}
			console.log(_width.value ,
                    _height.value ,
                    micID,
                    camID,
                    _audioCodecList.options[_audioCodecList.selectedIndex].value,
                    _videoCodecList.options[_videoCodecList.selectedIndex].value,
                    _audioKBitrate.value,
                    _audioSamplerate.value,
                    _videoFPS.value,
                    _videoKeyFrameInterval.value,
                    _videoKBitrate.value,
                    _videoQuality.value,
                    _volume.value,
                    _isUseCam.checked,
                    _isUseMic.checked,
                    _isHD.checked,
                    _isUDP.checked,
                    _isMute.checked);
            player1.startPublish( _width.value ,
							 _height.value ,
							 micID,
							 camID,
							 _audioCodecList.options[_audioCodecList.selectedIndex].value,
							 _videoCodecList.options[_videoCodecList.selectedIndex].value,
							 _audioKBitrate.value,
							 _audioSamplerate.value,
							 _videoFPS.value,
							 _videoKeyFrameInterval.value,
							 _videoKBitrate.value,
							 _videoQuality.value,
							 _volume.value,
							 _isUseCam.checked,
							 _isUseMic.checked,
							 _isHD.checked,
							 _isUDP.checked,
							 _isMute.checked);
		}
	}
	function startPlay()
	{
		if (player1)
			player1.startPlay( _bufferTime.value,
						   _speedupRange.value,
						   _speedupTime.value,
						   _speedupSpeed.value,
						   _volume.value,
						   _isMute.checked);
	}
	function pause()
	{
		if (player1)
			player1.pause();
	}
	function stop()
	{
		if (player1)
			player1.stop();
	}
	function setAudioCodec()
	{
		if (player1){
			var audioCodec = _audioCodecList.options[_audioCodecList.selectedIndex].value;
			player1.setAudioCodec(audioCodec);
		}
	}
	function setVideoCodec()
	{
		if (player1){
			var videoCodec = _videoCodecList.options[_videoCodecList.selectedIndex].value;
			player1.setVideoCodec(videoCodec);
		}
	}
	function setMic()
	{
		if (player1){
			var micID = -1;
			for(var i=0; i<_micIndexArray.length; i++)
			{
				if(i == _micList.selectedIndex)
				{
					micID = _micIndexArray[i]
					break;
				}
			}
			player1.setVideoCodec(micID);
		}
	}
	function setCam()
	{
		if (player1){
			var camID = -1;
			for(var i=0; i<_camIndexArray.length; i++)
			{
				if(i == _camList.selectedIndex)
				{
					camID = _camIndexArray[i]
					break;
				}
			}
			player1.setVideoCodec(camID);
		}
	}
	function setIsUseCam()
	{
		if (player1){
			var checked = _isUseCam.checked;
			player1.setIsUseCam(checked);
		}
	}
	function setIsUseMic()
	{
		if (player1){
			var checked = _isUseMic.checked;
			player1.setIsUseMic(checked);
		}
	}
	function downloadHD(){
		if(player1){
			player1.downloadHD();
		}
	}
	function checkPlugin(){
		if(player1){
			var result = player1.checkPlugin();
			if (result){
				switch(result.status)
				{
				case 1:
					_mediaInfo.value = 'HQPlugin is ready\n'+_mediaInfo.value;
					break;
				default:
					_mediaInfo.value = 'HQPlugin need help: '+result.info+'\n'+_mediaInfo.value;
					break;
				}
			}
			else{
				document.getElementById("mediaInfo").value += 'HQPlugin check error\n';
			}
		}
	}
	function setAvgPing(){
		if(player1){
			player1.setAvgPing(_avgPing.value);
		}
	}
	function setCameraMode(){
		if(player1){
			player1.setCameraMode(_width.value, _height.value, _videoFPS.value);
		}
	}
	function setKeyFrameInterval(){
		if(player1){
			player1.setKeyFrameInterval(_videoKeyFrameInterval.value);
		}
	}
	function setCameraQuality(){
		if(player1){
			player1.setCameraQuality(_videoKBitrate.value, _videoQuality.value);
		}
	}
	function setAudioBitrate(){
		if(player1){
			player1.setAudioBitrate(_audioKBitrate.value);
		}
	}
	function setAudioSamplerate(){
		if(player1){
			player1.setAudioSamplerate(_audioSamplerate.value);
		}
	}
	function setAudioChannelCount(){
		if(player1){
			player1.setAudioChannelCount(_audioChannelCount.value);
		}
	}
	function setAudioBitPerSample(){
		if(player1){
			player1.setAudioBitPerSample(_audioBitPerSample.value);
		}
	}
	function changeServer(){
		if(player1){
			var addr;
			var lineType;
			var serverString = _changeServerList.options[_changeServerList.selectedIndex].value;
			var serverArray = serverString.split('#');
			if (serverArray.length >= 3){
				addr = serverArray[1];
				lineType = serverArray[2];
				player1.changeServer(addr, lineType);
			}
		}
	}
	function setMute(){
		if(player1){
			player1.setMute(_isMute.checked);
		}
	}
	function setVolume(){
		if(player1){
			player1.setVolume(_volume.value);
		}
	}
	function setPlayMode(){
		if(player1){
			player1.setPlayMode(_bufferTime.value, _speedupRange.value, _speedupTime.value, _speedupSpeed.value);
		}
	}
	function setVideoDisplaySize(){
		if(player1){
			player1.setVideoDisplaySize(_displayWidth.value, _displayHeight.value);
		}
	}
	function setReceiveAudio(){
		if(player1){
			player1.setReceiveAudio(_isReceiveAudio.checked);
		}
	}
	function setReceiveVideo(){
		if(player1){
			player1.setReceiveVideo(_isReceiveVideo.checked);
		}
	}
	function setCapAudioFromMic(){
		if(player1){
			player1.setCapAudioFromMic();
		}
	}
	function setCapAudioFromStereo(){
		if(player1){
			player1.setCapAudioFromStereo();
		}
	}
</script>
<div id="HQPlugin"></div>
<script type="text/javascript">
function CallExternalFunc(param,name){try{eval(name+'(\''+param+'\')');}catch(e){}}
</script>
<script type="text/javascript" src="HighQualityServicePlugin.js"></script> 
</body>
</html>
